suppose you create 2 classes

@Component
class NormalClass {

}

@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)
@Component
class PrototypeClass {

}

@Configuration
@ComponentScan
public class BeanScopesLauncherApplication {

    public static void main(String[] args) throws InvalidTokenException {
        try (var context = new AnnotationConfigApplicationContext(BeanScopesLauncherApplication.class)) {
            System.out.println(context.getBean(NormalClass.class));
            System.out.println(context.getBean(NormalClass.class));
            System.out.println(context.getBean(PrototypeClass.class));
            System.out.println(context.getBean(PrototypeClass.class));
        }
    }
}

And you run this, the result you get is this
"C:\Program Files\Java\jdk-20\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.3.3\lib\idea_rt.jar=52002:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.3.3\bin" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath C:\learn-spring-framework\learn-spring-framework-02\target\classes;C:\Users\jamesst\.m2\repository\org\springframework\boot\spring-boot-starter\3.3.2\spring-boot-starter-3.3.2.jar;C:\Users\jamesst\.m2\repository\org\springframework\boot\spring-boot\3.3.2\spring-boot-3.3.2.jar;C:\Users\jamesst\.m2\repository\org\springframework\spring-context\6.1.11\spring-context-6.1.11.jar;C:\Users\jamesst\.m2\repository\org\springframework\spring-aop\6.1.11\spring-aop-6.1.11.jar;C:\Users\jamesst\.m2\repository\org\springframework\spring-beans\6.1.11\spring-beans-6.1.11.jar;C:\Users\jamesst\.m2\repository\org\springframework\spring-expression\6.1.11\spring-expression-6.1.11.jar;C:\Users\jamesst\.m2\repository\io\micrometer\micrometer-observation\1.13.2\micrometer-observation-1.13.2.jar;C:\Users\jamesst\.m2\repository\io\micrometer\micrometer-commons\1.13.2\micrometer-commons-1.13.2.jar;C:\Users\jamesst\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.3.2\spring-boot-autoconfigure-3.3.2.jar;C:\Users\jamesst\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.3.2\spring-boot-starter-logging-3.3.2.jar;C:\Users\jamesst\.m2\repository\ch\qos\logback\logback-classic\1.5.6\logback-classic-1.5.6.jar;C:\Users\jamesst\.m2\repository\ch\qos\logback\logback-core\1.5.6\logback-core-1.5.6.jar;C:\Users\jamesst\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.23.1\log4j-to-slf4j-2.23.1.jar;C:\Users\jamesst\.m2\repository\org\apache\logging\log4j\log4j-api\2.23.1\log4j-api-2.23.1.jar;C:\Users\jamesst\.m2\repository\org\slf4j\jul-to-slf4j\2.0.13\jul-to-slf4j-2.0.13.jar;C:\Users\jamesst\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\jamesst\.m2\repository\org\springframework\spring-core\6.1.11\spring-core-6.1.11.jar;C:\Users\jamesst\.m2\repository\org\springframework\spring-jcl\6.1.11\spring-jcl-6.1.11.jar;C:\Users\jamesst\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\jamesst\.m2\repository\org\slf4j\slf4j-api\2.0.13\slf4j-api-2.0.13.jar com.in28minutes.learn_spring_framework.examples.e1.BeanScopesLauncherApplication
com.in28minutes.learn_spring_framework.examples.e1.NormalClass@67c33749
com.in28minutes.learn_spring_framework.examples.e1.NormalClass@67c33749
com.in28minutes.learn_spring_framework.examples.e1.PrototypeClass@fba92d3
com.in28minutes.learn_spring_framework.examples.e1.PrototypeClass@662b4c69

Process finished with exit code 0

The same bean is retrieved in the case of NormalClass but a new instance is created for PrototypeClass.

The 2 types of bean scopes are singleton and prototype - one object instance per spring ioc container vs many
Scopes applicable only for web aware spring ApplicationContext
* Request - one obect instance per single HTTP request.
* Session - One object instance per user HTTP request. (A session is associated with a user)
* Application - obe object per web Application runtime.
* Websocket - One object instance per WebSocket instance.

Java Singleton (GOF) vs Spring Singleton
* Spring Singleton: one object instance per Spring IoC container
* Java Singleton: one object instance per JVM

GOF - gang of four design patterns (book) - the description for Java Singleton is as discussed in this book


Prototype vs Singleton
* Possibly many instances created per Spring IoC container    * One per spring ioc container
* new bean instances created every time bean is referred      * same bean instance reused
* not default                                                 * default
* @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)       * @Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON) or default
* rarely used                                                 * frequently used
* recommended for stateful beans that hold user info          * stateless beans - generic beans