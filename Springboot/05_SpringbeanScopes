suppose you create 2 classes

@Component
class NormalClass {

}

@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)
@Component
class PrototypeClass {

}

@Configuration
@ComponentScan
public class BeanScopesLauncherApplication {

    public static void main(String[] args) throws InvalidTokenException {
        try (var context = new AnnotationConfigApplicationContext(BeanScopesLauncherApplication.class)) {
            System.out.println(context.getBean(NormalClass.class));
            System.out.println(context.getBean(NormalClass.class));
            System.out.println(context.getBean(PrototypeClass.class));
            System.out.println(context.getBean(PrototypeClass.class));
        }
    }
}

And you run this, the result you get is this
"C:\Program Files\Java\jdk-20\bin\java.exe" .....
com.in28minutes.learn_spring_framework.examples.e1.BeanScopesLauncherApplication
com.in28minutes.learn_spring_framework.examples.e1.NormalClass@67c33749
com.in28minutes.learn_spring_framework.examples.e1.NormalClass@67c33749
com.in28minutes.learn_spring_framework.examples.e1.PrototypeClass@fba92d3
com.in28minutes.learn_spring_framework.examples.e1.PrototypeClass@662b4c69

Process finished with exit code 0

The same bean is retrieved in the case of NormalClass but a new instance is created for PrototypeClass.

The 2 types of bean scopes are singleton and prototype - one object instance per spring ioc container vs many
Scopes applicable only for web aware spring ApplicationContext
* Request - one obect instance per single HTTP request.
* Session - One object instance per user HTTP request. (A session is associated with a user)
* Application - obe object per web Application runtime.
* Websocket - One object instance per WebSocket instance.

Java Singleton (GOF) vs Spring Singleton
* Spring Singleton: one object instance per Spring IoC container
* Java Singleton: one object instance per JVM

GOF - gang of four design patterns (book) - the description for Java Singleton is as discussed in this book


Prototype vs Singleton
* Possibly many instances created per Spring IoC container    * One per spring ioc container
* new bean instances created every time bean is referred      * same bean instance reused
* not default                                                 * default
* @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)       * @Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON) or default
* rarely used                                                 * frequently used
* recommended for stateful beans that hold user info          * stateless beans - generic beans