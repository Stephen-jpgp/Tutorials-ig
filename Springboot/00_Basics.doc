var - a new kind of variable type - works with type inference - uses the value provided to assign type to the variable

Record - a new feature in jdk 16 where we can create a class where the getters setters etc are automatically created
* Created by using
  - record Person (String name, int age) {};

@Configuration - marks a class as a source of bean definitions, allowing the Spring container to manage the Beans defined in it

@Bean - the annotation that means the function returns a bean to be managed by the spring context.
Using the name attribute, you can change the name of the bean
ex: @Bean(name = "address3")
    public Address address() { ... }
If there are multiple beans of the same type and you try to retrieve a bean of that type, it throws an exception cause of the ambiguity.

SPRING CONTAINER
IOC (Inversion of Control) container = Spring Container
2 types of spring containers
1. Bean Factory
2. Application Context - advanced spring container with enterprise-specific features (AnnotationConfigApplicationContext)

BEANS
    JavaBeans - not important at all
    class JavaBean implements Serializable{
      public JavaBean() { ... }
      //getters and setters
    }
    requirements - 1. No argument constructor (public)
                   2. Should have getters and setters
                   3. Class should implement Serializable
    Now an instance of the class JavaBean is a java bean

    POJO class - Plain Old Java Object

    Spring bean - any object managed by spring - spring uses IOC container to manage these objects

CONTEXT RELATED FUNCTIONS
context.getBeanDefinitionCount() - no. of beans defined in the registry - System.out.println(context.getBeanDefinitionCount());
context.getBeanDefinitionNames() - returns string array of bean names - Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);

HOW TO PUT PRIORITY IN CASE OF LINE 13 (multiple beans of the same type and it being retrieved through type)
@Primary - gives the bean the first priority
@Qualifier - to use the particular bean, we can call it as **@Qualifier("addressqualifier") Address address**
@Qualifier("addressqualifier")
***But @Qualifier has higher priority than @Primary*** 

HOW TO DEFINE BEANS WITHOUT USING **@Bean**
@Component - used for defining classes - spring automatically creates the beans for us for these classes
@ComponentScan - used along with @Configuration annotation to specify the packages that we want to be scanned.
               - if used without args it means to scan the current package and all of its sub-packages
- Use this over a class definition


Used as ->
@Configuration
@ComponentScan("package-name-to-be-scanned")

@Autowired
used to automatically inject dependencies into Java classes


When to use @Component and @Bean
* used on any java class                        * typically used on methods in Spring Configuration Class
* initiated by just using the annotation        * you write all the code for creating the bean and autowiring
  - @Component                                    the dependencies 
* Autowiring done via Field, Setter or          * done via method calls or using parameters
  Constructor injection
* Spring framework creates the beans            * We write the bean creation code
* recommended to use when instantiating         * for
  beans for own application code                  1. custom business logic (like the GTCaas logic for eg (we're not doing this tho))
                                                  2. Instantiating Beans for 3rd party libraries  


Why lots of dependencies?
1. Multiple layers in a project (Web, business, data, etc)
2. Each layer is dependent on the layer below it
   * class in web layer cud be talking to class in business layer
   * class in business layer talks to class in data layer (data layer is depdency of business layer)
3. With Spring framework
   * instead of focussing on objects, their dependencies and wiring
     * focus on business logic of applications
   * Spring framework manages the lifecycle of objects
     * mark components using annotations
     * mark dependencies using autowired
     * allow spring framework do its thing

Different logging levels
1. Trace - all logs printed              ^ 
2. Debug                                 |
3. Info                                  |  The amount of logs increases upwards
4. Warning -                             |
5. Error - only errors and exceptions    |
6. Off - turns off entire logging        |